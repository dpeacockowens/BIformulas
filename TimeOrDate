From COVID Watch List / watch list table

032019 = 
CALCULATE(
SUM('ahi sales'[SALES]),
FILTER ('CALENDARLOOKUP', 'CALENDARLOOKUP'[DATE].[YEAR] IN {2019}),
FILTER ('CALENDARLOOKUP', 'CALENDARLOOKUP'[DATE].[MONTH] IN {"March"})
)

From DASHBOARD / Measure Table table

BCAFT = 
CALCULATE(
SUM('FY20 AHI daily'[Sales]).
FILTER ('FY20 AHI daily', 'FY20 AHI daily'[HB] IN {"AFT"}),
FILTER('FY20 AHI daily', 'FY20 AHI daily'[Invoice Date] < TODAY () - 365)
)

This approach will stop the SUM from crossing all dates. Instead, you will only use the SUM function on the last date of the time period, thus effectively creating a semi-additive measure.
Last Inventory Count =
CALCULATE (
    SUM ( 'Warehouse'[Inventory Count] ),
    LASTDATE ( 'Date'[Date] ))

Date =  
 ‎CALENDARAUTO(6)
 The CALENDARAUTO() function returns a single-column table consisting of date values. The “auto” behavior scans all data model date columns to determine the earliest and latest date values stored in the data model. It then creates one row for each date within this range, extending the range in either direction to ensure full years of data is stored.

This function can take a single optional argument which is the last month number of a year. When omitted, the value is 12, meaning that December is the last month of the year. In this case 6 is entered, meaning that June is the last month of the year.


Create new column for FY
Year =
 "FY" & YEAR('Date'[Date]) + IF(MONTH('Date'[Date]) > 6, 1)
 
 A calculated column is created by first entering the column name, followed by the equals symbol (=), followed by a DAX formula that returns a single-value result. The column name cannot already exist in the table.

The formula uses the date’s year value but adds one to the year value when the month is after June. This is how fiscal years at Adventure Works are calculated.


MonthKey =

 (YEAR('Date'[Date]) * 100) + MONTH('Date'[Date])

 This formula computes a numeric value for each year/month combination.
 
 
 
 YTD Total Sales = TOTALYTD 
( 
    SUM('Sales OrderDetails'[Total Price]) 
    , Dates[Date]
)
The YTD Total Sales measure uses a built-in DAX function called TOTALYTD. This function takes an argument for the type of calculation. You can use the SUM function to get the Total Price, as you've done throughout this module. The second argument that you want to operate over is the Dates field. You can use your Dates table and add this measure to your visual, and you'll get the running total result that you're looking for. You can use all functions with YTD, MTD, and QTD in a similar fashion.


Another example of working with time would be comparing your current sales with the sales of a previous time period. For instance, if you want to see the total sales of the month next to the total sales of the prior month, you would enter the DAX measure definition, as shown in the following example:

Total Sales Previous Month = CALCULATE
(
    sum('Sales OrderDetails'[Total Price])
    , PREVIOUSMONTH(Dates[Date])
)

This measure uses the CALCULATE function, indicating that you're overriding the context to evaluate this expression the way that you want to. You're summing Total Price, as you've been doing throughout this module. For the second argument, you're using PREVIOUSMONTH for the override, which tells Power BI that, no matter what month is the default, the system should override it to be the previous month.


